{
  "address": "0x61D178043F1998e1C2FBf378d438100b6f23095E",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EmptyArgs",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptySource",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoInlineSecrets",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRouterCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "UnexpectedRequestID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "riskFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "Response",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "handleOracleFulfillment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "riskFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastError",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastRequestId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastResponse",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "string[]",
          "name": "args",
          "type": "string[]"
        }
      ],
      "name": "sendRequest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8f0c098b23d35c49ec7f4509ee901f20abaacd8d405d3f46d2b2104d2a487d52",
  "receipt": {
    "to": null,
    "from": "0x4d0A84C61C22c26a2513Cd81079A26Ef3C47Fb79",
    "contractAddress": "0x61D178043F1998e1C2FBf378d438100b6f23095E",
    "transactionIndex": 3,
    "gasUsed": "3071342",
    "logsBloom": "0x
    "blockHash": "0xd8c7ff002f2949c439784c5d4a7b6dba6fc9f0c63e0190ae8df3f0734d181db9",
    "transactionHash": "0x8f0c098b23d35c49ec7f4509ee901f20abaacd8d405d3f46d2b2104d2a487d52",
    "logs": [],
    "blockNumber": 14551106,
    "cumulativeGasUsed": "4507718",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "de54e8dad981b623a4a1d5e2ff8d28a3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EmptyArgs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySource\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoInlineSecrets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRouterCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"UnexpectedRequestID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"riskFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"Response\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"handleOracleFulfillment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"riskFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastError\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastRequestId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastResponse\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"string[]\",\"name\":\"args\",\"type\":\"string[]\"}],\"name\":\"sendRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"details\":\"Either response or error parameter will be set, but never both.\",\"params\":{\"err\":\"Aggregated error either from the request's source code or from the execution pipeline.\",\"requestId\":\"The requestId returned by FunctionsClient.sendRequest().\",\"response\":\"Aggregated response from the request's source code.\"}},\"sendRequest(uint64,string[])\":{\"params\":{\"args\":\"The arguments to pass to the HTTP request\",\"subscriptionId\":\"The ID for the Chainlink subscription\"},\"returns\":{\"requestId\":\"The ID of the request\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"constructor\":{\"notice\":\"Initializes the contract with the Chainlink router address and sets the contract owner\"},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"notice\":\"Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"sendRequest(uint64,string[])\":{\"notice\":\"Sends an HTTP request for weather and soil data\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address.\"}},\"notice\":\"deployed address  Sepolio : 0x8e6030023C1454fFbc2EF18c0da14809Fe95F7E0\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/chain_link/WeatherRiskFunctionsConsumer.sol\":\"WeatherRiskFunctionsConsumer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsRouter} from \\\"./interfaces/IFunctionsRouter.sol\\\";\\nimport {IFunctionsClient} from \\\"./interfaces/IFunctionsClient.sol\\\";\\n\\nimport {FunctionsRequest} from \\\"./libraries/FunctionsRequest.sol\\\";\\n\\n/// @title The Chainlink Functions client contract\\n/// @notice Contract developers can inherit this contract in order to make Chainlink Functions requests\\nabstract contract FunctionsClient is IFunctionsClient {\\n  using FunctionsRequest for FunctionsRequest.Request;\\n\\n  IFunctionsRouter internal immutable i_router;\\n\\n  event RequestSent(bytes32 indexed id);\\n  event RequestFulfilled(bytes32 indexed id);\\n\\n  error OnlyRouterCanFulfill();\\n\\n  constructor(address router) {\\n    i_router = IFunctionsRouter(router);\\n  }\\n\\n  /// @notice Sends a Chainlink Functions request\\n  /// @param data The CBOR encoded bytes data for a Functions request\\n  /// @param subscriptionId The subscription ID that will be charged to service the request\\n  /// @param callbackGasLimit the amount of gas that will be available for the fulfillment callback\\n  /// @return requestId The generated request ID for this request\\n  function _sendRequest(\\n    bytes memory data,\\n    uint64 subscriptionId,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) internal returns (bytes32) {\\n    bytes32 requestId = i_router.sendRequest(\\n      subscriptionId,\\n      data,\\n      FunctionsRequest.REQUEST_DATA_VERSION,\\n      callbackGasLimit,\\n      donId\\n    );\\n    emit RequestSent(requestId);\\n    return requestId;\\n  }\\n\\n  /// @notice User defined function to handle a response from the DON\\n  /// @param requestId The request ID, returned by sendRequest()\\n  /// @param response Aggregated response from the execution of the user's source code\\n  /// @param err Aggregated error from the execution of the user code or from the execution pipeline\\n  /// @dev Either response or error parameter will be set, but never both\\n  function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal virtual;\\n\\n  /// @inheritdoc IFunctionsClient\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external override {\\n    if (msg.sender != address(i_router)) {\\n      revert OnlyRouterCanFulfill();\\n    }\\n    fulfillRequest(requestId, response, err);\\n    emit RequestFulfilled(requestId);\\n  }\\n}\\n\",\"keccak256\":\"0x40224641403cb9fa03d4f060296d7420a9ff11b46abadc958ae048459205e397\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Chainlink Functions client interface.\\ninterface IFunctionsClient {\\n  /// @notice Chainlink Functions response handler called by the Functions Router\\n  /// during fullilment from the designated transmitter node in an OCR round.\\n  /// @param requestId The requestId returned by FunctionsClient.sendRequest().\\n  /// @param response Aggregated response from the request's source code.\\n  /// @param err Aggregated error either from the request's source code or from the execution pipeline.\\n  /// @dev Either response or error parameter will be set, but never both.\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external;\\n}\\n\",\"keccak256\":\"0x6117b82e7c4eec44ce557b0fc8bc1ac5f49e5d160ac6d4485452d6aafdd762ff\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Router interface.\\ninterface IFunctionsRouter {\\n  /// @notice The identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  /// @return id - bytes32 id that can be passed to the \\\"getContractById\\\" of the Router\\n  function getAllowListId() external view returns (bytes32);\\n\\n  /// @notice Set the identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  function setAllowListId(bytes32 allowListId) external;\\n\\n  /// @notice Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\\n  /// @return adminFee\\n  function getAdminFee() external view returns (uint72 adminFee);\\n\\n  /// @notice Sends a request using the provided subscriptionId\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Sends a request to the proposed contracts\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequestToProposed(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Fulfill the request by:\\n  /// - calling back the data that the Oracle returned to the client contract\\n  /// - pay the DON for processing the request\\n  /// @dev Only callable by the Coordinator contract that is saved in the commitment\\n  /// @param response response data from DON consensus\\n  /// @param err error from DON consensus\\n  /// @param juelsPerGas - current rate of juels/gas\\n  /// @param costWithoutFulfillment - The cost of processing the request (in Juels of LINK ), without fulfillment\\n  /// @param transmitter - The Node that transmitted the OCR report\\n  /// @param commitment - The parameters of the request that must be held consistent between request and response time\\n  /// @return fulfillResult -\\n  /// @return callbackGasCostJuels -\\n  function fulfill(\\n    bytes memory response,\\n    bytes memory err,\\n    uint96 juelsPerGas,\\n    uint96 costWithoutFulfillment,\\n    address transmitter,\\n    FunctionsResponse.Commitment memory commitment\\n  ) external returns (FunctionsResponse.FulfillResult, uint96);\\n\\n  /// @notice Validate requested gas limit is below the subscription max.\\n  /// @param subscriptionId subscription ID\\n  /// @param callbackGasLimit desired callback gas limit\\n  function isValidCallbackGasLimit(uint64 subscriptionId, uint32 callbackGasLimit) external view;\\n\\n  /// @notice Get the current contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current contract address\\n  function getContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Get the proposed next contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current or proposed contract address\\n  function getProposedContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Return the latest proprosal set\\n  /// @return ids The identifiers of the contracts to update\\n  /// @return to The addresses of the contracts that will be updated to\\n  function getProposedContractSet() external view returns (bytes32[] memory, address[] memory);\\n\\n  /// @notice Proposes one or more updates to the contract routes\\n  /// @dev Only callable by owner\\n  function proposeContractsUpdate(bytes32[] memory proposalSetIds, address[] memory proposalSetAddresses) external;\\n\\n  /// @notice Updates the current contract routes to the proposed contracts\\n  /// @dev Only callable by owner\\n  function updateContracts() external;\\n\\n  /// @dev Puts the system into an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function pause() external;\\n\\n  /// @dev Takes the system out of an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0x44db41e8ff90c2828ca0ada125abc4b411921a86514a4a047fd9fd43ba9d7e08\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {CBOR} from \\\"../../../vendor/solidity-cborutils/v2.0.0/CBOR.sol\\\";\\n\\n/// @title Library for encoding the input data of a Functions request into CBOR\\nlibrary FunctionsRequest {\\n  using CBOR for CBOR.CBORBuffer;\\n\\n  uint16 public constant REQUEST_DATA_VERSION = 1;\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  enum Location {\\n    Inline, // Provided within the Request\\n    Remote, // Hosted through remote location that can be accessed through a provided URL\\n    DONHosted // Hosted on the DON's storage\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of the source code that will be executed on each node in the DON\\n    Location secretsLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of secrets that will be passed into the source code. *Only Remote secrets are supported\\n    CodeLanguage language; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The coding language that the source code is written in\\n    string source; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Raw source code for Request.codeLocation of Location.Inline, URL for Request.codeLocation of Location.Remote, or slot decimal number for Request.codeLocation of Location.DONHosted\\n    bytes encryptedSecretsReference; // \\u2550\\u2550\\u2578 Encrypted URLs for Request.secretsLocation of Location.Remote (use addSecretsReference()), or CBOR encoded slotid+version for Request.secretsLocation of Location.DONHosted (use addDONHostedSecrets())\\n    string[] args; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 String arguments that will be passed into the source code\\n    bytes[] bytesArgs; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Bytes arguments that will be passed into the source code\\n  }\\n\\n  error EmptySource();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n  error NoInlineSecrets();\\n\\n  /// @notice Encodes a Request to CBOR encoded bytes\\n  /// @param self The request to encode\\n  /// @return CBOR encoded bytes\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"codeLocation\\\");\\n    buffer.writeUInt256(uint256(self.codeLocation));\\n\\n    buffer.writeString(\\\"language\\\");\\n    buffer.writeUInt256(uint256(self.language));\\n\\n    buffer.writeString(\\\"source\\\");\\n    buffer.writeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buffer.writeString(\\\"args\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.args.length; ++i) {\\n        buffer.writeString(self.args[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    if (self.encryptedSecretsReference.length > 0) {\\n      if (self.secretsLocation == Location.Inline) {\\n        revert NoInlineSecrets();\\n      }\\n      buffer.writeString(\\\"secretsLocation\\\");\\n      buffer.writeUInt256(uint256(self.secretsLocation));\\n      buffer.writeString(\\\"secrets\\\");\\n      buffer.writeBytes(self.encryptedSecretsReference);\\n    }\\n\\n    if (self.bytesArgs.length > 0) {\\n      buffer.writeString(\\\"bytesArgs\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.bytesArgs.length; ++i) {\\n        buffer.writeBytes(self.bytesArgs[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    return buffer.buf.buf;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Sets the codeLocation and code on the request\\n  /// @param self The uninitialized request\\n  /// @param codeLocation The user provided source code location\\n  /// @param language The programming language of the user code\\n  /// @param source The user provided source code or a url\\n  function initializeRequest(\\n    Request memory self,\\n    Location codeLocation,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = codeLocation;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Simplified version of initializeRequest for PoC\\n  /// @param self The uninitialized request\\n  /// @param javaScriptSource The user provided JS code (must not be empty)\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /// @notice Adds Remote user encrypted secrets to a Request\\n  /// @param self The initialized request\\n  /// @param encryptedSecretsReference Encrypted comma-separated string of URLs pointing to off-chain secrets\\n  function addSecretsReference(Request memory self, bytes memory encryptedSecretsReference) internal pure {\\n    if (encryptedSecretsReference.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Remote;\\n    self.encryptedSecretsReference = encryptedSecretsReference;\\n  }\\n\\n  /// @notice Adds DON-hosted secrets reference to a Request\\n  /// @param self The initialized request\\n  /// @param slotID Slot ID of the user's secrets hosted on DON\\n  /// @param version User data version (for the slotID)\\n  function addDONHostedSecrets(Request memory self, uint8 slotID, uint64 version) internal pure {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"slotID\\\");\\n    buffer.writeUInt64(slotID);\\n    buffer.writeString(\\\"version\\\");\\n    buffer.writeUInt64(version);\\n\\n    self.secretsLocation = Location.DONHosted;\\n    self.encryptedSecretsReference = buffer.buf.buf;\\n  }\\n\\n  /// @notice Sets args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of string args (must not be empty)\\n  function setArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n\\n  /// @notice Sets bytes args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of bytes args (must not be empty)\\n  function setBytesArgs(Request memory self, bytes[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.bytesArgs = args;\\n  }\\n}\\n\",\"keccak256\":\"0xed75be0eaba358d468f1fe18adc377d5044f57eff0070081f884a1f212d0adc2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Library of types that are used for fulfillment of a Functions request\\nlibrary FunctionsResponse {\\n  // Used to send request information from the Router to the Coordinator\\n  struct RequestMeta {\\n    bytes data; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n    address requestingContract; // \\u2550\\u2550\\u2557 The client contract that is sending the request\\n    uint96 availableBalance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u255d Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint64 subscriptionId; //        \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint64 initiatedRequests; //     \\u2551 The number of requests that have been started\\n    uint32 callbackGasLimit; //      \\u2551 The amount of gas that the callback to the consuming contract will be given\\n    uint16 dataVersion; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The version of the structure of the CBOR encoded request data\\n    uint64 completedRequests; // \\u2550\\u2550\\u2550\\u2550\\u2557 The number of requests that have successfully completed or timed out\\n    address subscriptionOwner; // \\u2550\\u2550\\u2550\\u255d The owner of the billing subscription\\n  }\\n\\n  enum FulfillResult {\\n    FULFILLED, // 0\\n    USER_CALLBACK_ERROR, // 1\\n    INVALID_REQUEST_ID, // 2\\n    COST_EXCEEDS_COMMITMENT, // 3\\n    INSUFFICIENT_GAS_PROVIDED, // 4\\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\\n    INVALID_COMMITMENT // 6\\n  }\\n\\n  struct Commitment {\\n    bytes32 requestId; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 A unique identifier for a Chainlink Functions request\\n    address coordinator; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The Coordinator contract that manages the DON that is servicing a request\\n    uint96 estimatedTotalCostJuels; // \\u2550\\u2550\\u2550\\u2550\\u255d The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\\n    address client; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The client contract that sent the request\\n    uint64 subscriptionId; //              \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint32 callbackGasLimit; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The amount of gas that the callback to the consuming contract will be given\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint72 donFee; //                      \\u2551 Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\\n    uint40 gasOverheadBeforeCallback; //   \\u2551 Represents the average gas execution cost before the fulfillment callback.\\n    uint40 gasOverheadAfterCallback; //    \\u2551 Represents the average gas execution cost after the fulfillment callback.\\n    uint32 timeoutTimestamp; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The timestamp at which a request will be eligible to be timed out\\n  }\\n}\\n\",\"keccak256\":\"0xc72eb037effef32146f7cd4086af00f44f28c8649d891e5e404fec5fda7e802b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2422a055657a87e98be61f8f31abb1824ec50fd0f73949f4e3c6ac877efb6da8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\",\"keccak256\":\"0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0\",\"license\":\"BSD-2-Clause\"},\"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../@ensdomains/buffer/v0.1.0/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xdecf04203502670ac72ba466c75e4f87f4419907365005f0d73e7d07ee3e5715\",\"license\":\"MIT\"},\"contracts/chain_link/WeatherRiskFunctionsConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport { FunctionsClient } from \\\"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol\\\";\\nimport { ConfirmedOwner } from \\\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\\\";\\nimport { FunctionsRequest } from \\\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol\\\";\\n\\n/** deployed address \\nSepolio : 0x8e6030023C1454fFbc2EF18c0da14809Fe95F7E0\\n */\\n\\ncontract WeatherRiskFunctionsConsumer is FunctionsClient, ConfirmedOwner {\\n\\tusing FunctionsRequest for FunctionsRequest.Request;\\n\\n\\t// State variables to store the last request ID, response, and error\\n\\tbytes32 public s_lastRequestId;\\n\\tbytes public s_lastResponse;\\n\\tbytes public s_lastError;\\n\\n\\t// Custom error type\\n\\terror UnexpectedRequestID(bytes32 requestId);\\n\\n\\t// Event to log responses\\n\\tevent Response(\\n\\t\\tbytes32 indexed requestId,\\n\\t\\tuint256 riskFactor,\\n\\t\\tbytes response,\\n\\t\\tbytes err\\n\\t);\\n\\n\\t// Router address - Hardcoded for Sepolia\\n\\t// Check to get the router address for your supported network https://docs.chain.link/chainlink-functions/supported-networks\\n\\taddress router = 0xC17094E3A1348E5C7544D4fF8A36c28f2C6AAE28;\\n\\n\\t// JavaScript source code\\n\\t// Fetch weather and soil data and calculate risk factor.\\n\\tstring source =\\n\\t\\t\\\"const token = args[0];\\\"\\n        \\\"const locationid = args[1];\\\"\\n        \\\"const startdate = args[2];\\\"\\n        \\\"const enddate = args[3];\\\"\\n        \\\"const datatypeid = 'TAVG';\\\"\\n        \\\"const appid = args[4];\\\"\\n        \\\"const cityName = args[5];\\\"\\n        \\\"const url = `https://www.ncei.noaa.gov/cdo-web/api/v2/data?datasetid=GHCND&locationid=${locationid}&startdate=${startdate}&enddate=${enddate}&datatypeid=${datatypeid}&limit=30`;\\\"\\n        \\\"const noaaResponse = await Functions.makeHttpRequest({url: url,headers: {'token': token,},});\\\"\\n        \\\"if (noaaResponse.error) {throw Error('NOAA request failed');}\\\"\\n        \\\"const weatherData = noaaResponse.data;\\\"\\n        \\\"function calculateWeatherRisk(data) {const extremeHigh = 35;const extremeLow = 0;let extremeCount = 0;for (const entry of data.results) {const value = entry.value;if (value > extremeHigh || value < extremeLow) {extremeCount += 1;}}const totalEvents = data.results.length;const riskFactor = totalEvents > 0 ? extremeCount / totalEvents : 0;return riskFactor;}\\\"\\n        \\\"const weatherRiskFactor = calculateWeatherRisk(weatherData);\\\"\\n        \\\"const cityResponse = await Functions.makeHttpRequest({url: `https://api.openweathermap.org/geo/1.0/direct?q=${cityName}&limit=1&appid=${appid}`,});\\\"\\n        \\\"if (cityResponse.error) {throw Error('City request failed');}\\\"\\n        \\\"const city = cityResponse.data[0];\\\"\\n        \\\"const lat = city.lat;\\\"\\n        \\\"const lon = city.lon;\\\"\\n        \\\"const soilUrl = `https://rest.isric.org/soilgrids/v2.0/properties/query?lon=${lon}&lat=${lat}&property=clay&property=sand&property=silt&depth=0-5cm&depth=0-30cm&depth=5-15cm&value=mean`;\\\"\\n        \\\"const soilResponse = await Functions.makeHttpRequest({url: soilUrl,});\\\"\\n        \\\"if (soilResponse.error) {throw Error('Soil properties request failed');}\\\"\\n        \\\"const soilData = soilResponse.data;\\\"\\n        \\\"const weightClay = 0.3;\\\"\\n        \\\"const weightSand = 0.4;\\\"\\n        \\\"const weightSilt = 0.3;\\\"\\n        \\\"function extractMeanValue(response, layerName) {const layer = response.properties.layers.find(l => l.name === layerName);if (layer) {const depthRange = layer.depths.find(d => d.label === '0-5cm');return depthRange && depthRange.values.mean ? depthRange.values.mean / layer.unit_measure.d_factor : 0;}return 0;}\\\"\\n        \\\"const clayMean = extractMeanValue(soilData, 'clay');\\\"\\n        \\\"const sandMean = extractMeanValue(soilData, 'sand');\\\"\\n        \\\"const siltMean = extractMeanValue(soilData, 'silt');\\\"\\n        \\\"const soilFactor=(weightClay*clayMean)+(weightSand*sandMean)+(weightSilt *siltMean);\\\"\\n        \\\"const riskFactor = 100 * (weatherRiskFactor + soilFactor);\\\"\\n\\t\\t\\\"return Functions.encodeUint256(Math.round(riskFactor));\\\";\\n\\n\\t// Callback gas limit\\n\\tuint32 gasLimit = 300000;\\n\\n\\t// donID - Hardcoded for Sepolia\\n\\t// Check to get the donID for your supported network https://docs.chain.link/chainlink-functions/supported-networks\\n\\tbytes32 donID =\\n\\t\\t0x66756e2d6f7074696d69736d2d7365706f6c69612d3100000000000000000000;\\n\\n\\t// State variable to store the returned risk factor\\n\\tuint256 public riskFactor;\\n\\n\\t/**\\n\\t * @notice Initializes the contract with the Chainlink router address and sets the contract owner\\n\\t */\\n\\tconstructor() FunctionsClient(router) ConfirmedOwner(msg.sender) {}\\n\\n\\t/**\\n\\t * @notice Sends an HTTP request for weather and soil data\\n\\t * @param subscriptionId The ID for the Chainlink subscription\\n\\t * @param args The arguments to pass to the HTTP request\\n\\t * @return requestId The ID of the request\\n\\t */\\n\\tfunction sendRequest(\\n\\t\\tuint64 subscriptionId,\\n\\t\\tstring[] calldata args\\n\\t) external onlyOwner returns (bytes32 requestId) {\\n\\t\\tFunctionsRequest.Request memory req;\\n\\t\\treq.initializeRequestForInlineJavaScript(source); // Initialize the request with JS code\\n\\t\\tif (args.length > 0) req.setArgs(args); // Set the arguments for the request\\n\\n\\t\\t// Send the request and store the request ID\\n\\t\\ts_lastRequestId = _sendRequest(\\n\\t\\t\\treq.encodeCBOR(),\\n\\t\\t\\tsubscriptionId,\\n\\t\\t\\tgasLimit,\\n\\t\\t\\tdonID\\n\\t\\t);\\n\\n\\t\\treturn s_lastRequestId;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Callback function for fulfilling a request\\n\\t * @param requestId The ID of the request to fulfill\\n\\t * @param response The HTTP response data\\n\\t * @param err Any errors from the Functions request\\n\\t */\\n\\tfunction fulfillRequest(\\n\\t\\tbytes32 requestId,\\n\\t\\tbytes memory response,\\n\\t\\tbytes memory err\\n\\t) internal override {\\n\\t\\tif (s_lastRequestId != requestId) {\\n\\t\\t\\trevert UnexpectedRequestID(requestId); // Check if request IDs match\\n\\t\\t}\\n\\t\\t// Update the contract's state variables with the response and any errors\\n\\t\\ts_lastResponse = response;\\n\\t\\triskFactor = abi.decode(response, (uint256));\\n\\t\\ts_lastError = err;\\n\\n\\t\\t// Emit an event to log the response\\n\\t\\temit Response(requestId, riskFactor, s_lastResponse, s_lastError);\\n\\t}\\n}\\n\",\"keccak256\":\"0x115c0c44e10a350b5600ea6b8786fe83b0e8c274d1437174d6f4081f494caff1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x600580546001600160a01b03191673c17094e3a1348e5c7544d4ff8a36c28f2c6aae28179055610a0060405261092260a0818152906200196b60c0396006906200004a908262000281565b506007805463ffffffff1916620493e01790557f66756e2d6f7074696d69736d2d7365706f6c69612d31000000000000000000006008553480156200008e57600080fd5b506005546001600160a01b03166080523380600081620000f55760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b03848116919091179091558116156200012857620001288162000131565b5050506200034d565b336001600160a01b038216036200018b5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401620000ec565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200020757607f821691505b6020821081036200022857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200027c57600081815260208120601f850160051c81016020861015620002575750805b601f850160051c820191505b81811015620002785782815560010162000263565b5050505b505050565b81516001600160401b038111156200029d576200029d620001dc565b620002b581620002ae8454620001f2565b846200022e565b602080601f831160018114620002ed5760008415620002d45750858301515b600019600386901b1c1916600185901b17855562000278565b600085815260208120601f198616915b828110156200031e57888601518255948401946001909101908401620002fd565b50858210156200033d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6080516115fb6200037060003960008181610143015261085201526115fb6000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80634b0795a8116100665780634b0795a8146100f157806379ba5097146100f95780638da5cb5b14610101578063b1e217491461011c578063f2fde38b1461012557600080fd5b806304c46c13146100985780630ca76175146100b45780633944ea3a146100c957806348a7d26d146100de575b600080fd5b6100a160095481565b6040519081526020015b60405180910390f35b6100c76100c2366004610fad565b610138565b005b6100d16101bc565b6040516100ab919061105f565b6100a16100ec366004611072565b61024a565b6100d161037a565b6100c7610387565b6000546040516001600160a01b0390911681526020016100ab565b6100a160025481565b6100c7610133366004611100565b610436565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101815760405163c6829f8360e01b815260040160405180910390fd5b61018c83838361044a565b60405183907f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e690600090a2505050565b600380546101c990611129565b80601f01602080910402602001604051908101604052809291908181526020018280546101f590611129565b80156102425780601f1061021757610100808354040283529160200191610242565b820191906000526020600020905b81548152906001019060200180831161022557829003601f168201915b505050505081565b60006102546104e5565b6102956040805160e0810190915280600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b610332600680546102a590611129565b80601f01602080910402602001604051908101604052809291908181526020018280546102d190611129565b801561031e5780601f106102f35761010080835404028352916020019161031e565b820191906000526020600020905b81548152906001019060200180831161030157829003601f168201915b50505050508261053a90919063ffffffff16565b821561034c5761034c6103458486611163565b829061054b565b61036c61035882610575565b600754600854889163ffffffff169061084d565b600281905595945050505050565b600480546101c990611129565b6001546001600160a01b031633146103df5760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b60448201526064015b60405180910390fd5b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b61043e6104e5565b6104478161091f565b50565b826002541461046f5760405163d068bf5b60e01b8152600481018490526024016103d6565b600361047b8382611248565b50818060200190518101906104909190611307565b600955600461049f8282611248565b50827ffc03b1503acd478faf9c08107596f6d5c04b4591fea84f8d6f21bdf613b5370e600954600360046040516104d89392919061139d565b60405180910390a2505050565b6000546001600160a01b031633146105385760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b60448201526064016103d6565b565b61054782600080846109c8565b5050565b805160000361056d5760405163fe936cb760e01b815260040160405180910390fd5b60a090910152565b60606000610584610100610a46565b90506105bd6040518060400160405280600c81526020016b31b7b232a637b1b0ba34b7b760a11b81525082610a6790919063ffffffff16565b82516105db9060028111156105d4576105d46113d2565b8290610a85565b6040805180820190915260088152676c616e677561676560c01b6020820152610605908290610a67565b604083015161061c9080156105d4576105d46113d2565b604080518082019091526006815265736f7572636560d01b6020820152610644908290610a67565b6060830151610654908290610a67565b60a083015151156106e8576040805180820190915260048152636172677360e01b6020820152610685908290610a67565b61068e81610abe565b60005b8360a00151518110156106de576106ce8460a0015182815181106106b7576106b76113e8565b602002602001015183610a6790919063ffffffff16565b6106d781611414565b9050610691565b506106e881610ae2565b608083015151156107ac5760008360200151600281111561070b5761070b6113d2565b036107295760405163a80d31f760e01b815260040160405180910390fd5b60408051808201909152600f81526e39b2b1b932ba39a637b1b0ba34b7b760891b602082015261075a908290610a67565b610773836020015160028111156105d4576105d46113d2565b6040805180820190915260078152667365637265747360c81b602082015261079c908290610a67565b60808301516107ac908290610b00565b60c083015151156108455760408051808201909152600981526862797465734172677360b81b60208201526107e2908290610a67565b6107eb81610abe565b60005b8360c001515181101561083b5761082b8460c001518281518110610814576108146113e8565b602002602001015183610b0090919063ffffffff16565b61083481611414565b90506107ee565b5061084581610ae2565b515192915050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663461d27628688600188886040518663ffffffff1660e01b81526004016108a595949392919061142d565b6020604051808303816000875af11580156108c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e89190611307565b60405190915081907f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db890600090a295945050505050565b336001600160a01b038216036109775760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016103d6565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b80516000036109ea576040516322ce3edd60e01b815260040160405180910390fd5b838360028111156109fd576109fd6113d2565b90816002811115610a1057610a106113d2565b90525060408401828015610a2657610a266113d2565b90818015610a3657610a366113d2565b9052506060909301929092525050565b610a4e610ebb565b8051610a5a9083610b0d565b5060006020820152919050565b610a748260038351610b87565b8151610a809082610ca6565b505050565b8151610a929060c2610cce565b506105478282604051602001610aaa91815260200190565b604051602081830303815290604052610b00565b610ac9816004610d37565b600181602001818151610adc9190611476565b90525050565b610aed816007610d37565b600181602001818151610adc9190611489565b610a748260028351610b87565b604080518082019091526060815260006020820152610b2d60208361149c565b15610b5557610b3d60208361149c565b610b48906020611489565b610b529083611476565b91505b602080840183905260405180855260008152908184010181811015610b7957600080fd5b604052508290505b92915050565b6017816001600160401b031611610bb3578251610bad9060e0600585901b168317610cce565b50505050565b60ff816001600160401b031611610bf3578251610bdb906018611fe0600586901b1617610cce565b508251610bad906001600160401b0383166001610d4e565b61ffff816001600160401b031611610c34578251610c1c906019611fe0600586901b1617610cce565b508251610bad906001600160401b0383166002610d4e565b63ffffffff816001600160401b031611610c77578251610c5f90601a611fe0600586901b1617610cce565b508251610bad906001600160401b0383166004610d4e565b8251610c8e90601b611fe0600586901b1617610cce565b508251610bad906001600160401b0383166008610d4e565b604080518082019091526060815260006020820152610cc783838451610dd3565b9392505050565b6040805180820190915260608152600060208201528251516000610cf3826001611476565b905084602001518210610d1457610d1485610d0f8360026114be565b610ea4565b8451602083820101858153508051821115610d2d578181525b5093949350505050565b8151610a8090601f611fe0600585901b1617610cce565b6040805180820190915260608152600060208201528351516000610d728285611476565b90508560200151811115610d8f57610d8f86610d0f8360026114be565b60006001610d9f866101006115b9565b610da99190611489565b90508651828101878319825116178152508051831115610dc7578281525b50959695505050505050565b6040805180820190915260608152600060208201528251821115610df657600080fd5b8351516000610e058483611476565b90508560200151811115610e2257610e2286610d0f8360026114be565b855180518382016020019160009180851115610e3c578482525b505050602086015b60208610610e7c5780518252610e5b602083611476565b9150610e68602082611476565b9050610e75602087611489565b9550610e44565b51815160001960208890036101000a0190811690199190911617905250849150509392505050565b8151610eb08383610b0d565b50610bad8382610ca6565b6040518060400160405280610ee3604051806040016040528060608152602001600081525090565b8152602001600081525090565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715610f2e57610f2e610ef0565b604052919050565b60006001600160401b03831115610f4f57610f4f610ef0565b610f62601f8401601f1916602001610f06565b9050828152838383011115610f7657600080fd5b828260208301376000602084830101529392505050565b600082601f830112610f9e57600080fd5b610cc783833560208501610f36565b600080600060608486031215610fc257600080fd5b8335925060208401356001600160401b0380821115610fe057600080fd5b610fec87838801610f8d565b9350604086013591508082111561100257600080fd5b5061100f86828701610f8d565b9150509250925092565b6000815180845260005b8181101561103f57602081850181015186830182015201611023565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610cc76020830184611019565b60008060006040848603121561108757600080fd5b83356001600160401b03808216821461109f57600080fd5b909350602085013590808211156110b557600080fd5b818601915086601f8301126110c957600080fd5b8135818111156110d857600080fd5b8760208260051b85010111156110ed57600080fd5b6020830194508093505050509250925092565b60006020828403121561111257600080fd5b81356001600160a01b0381168114610cc757600080fd5b600181811c9082168061113d57607f821691505b60208210810361115d57634e487b7160e01b600052602260045260246000fd5b50919050565b60006001600160401b038084111561117d5761117d610ef0565b8360051b602061118e818301610f06565b8681529185019181810190368411156111a657600080fd5b865b848110156111ee578035868111156111c05760008081fd5b880136601f8201126111d25760008081fd5b6111e0368235878401610f36565b8452509183019183016111a8565b50979650505050505050565b601f821115610a8057600081815260208120601f850160051c810160208610156112215750805b601f850160051c820191505b818110156112405782815560010161122d565b505050505050565b81516001600160401b0381111561126157611261610ef0565b6112758161126f8454611129565b846111fa565b602080601f8311600181146112aa57600084156112925750858301515b600019600386901b1c1916600185901b178555611240565b600085815260208120601f198616915b828110156112d9578886015182559484019460019091019084016112ba565b50858210156112f75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020828403121561131957600080fd5b5051919050565b6000815461132d81611129565b80855260206001838116801561134a576001811461136457611392565b60ff1985168884015283151560051b880183019550611392565b866000528260002060005b8581101561138a5781548a820186015290830190840161136f565b890184019650505b505050505092915050565b8381526060602082015260006113b66060830185611320565b82810360408401526113c88185611320565b9695505050505050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611426576114266113fe565b5060010190565b6001600160401b038616815260a06020820152600061144f60a0830187611019565b61ffff9590951660408301525063ffffffff92909216606083015260809091015292915050565b80820180821115610b8157610b816113fe565b81810381811115610b8157610b816113fe565b6000826114b957634e487b7160e01b600052601260045260246000fd5b500690565b8082028115828204841417610b8157610b816113fe565b600181815b808511156115105781600019048211156114f6576114f66113fe565b8085161561150357918102915b93841c93908002906114da565b509250929050565b60008261152757506001610b81565b8161153457506000610b81565b816001811461154a576002811461155457611570565b6001915050610b81565b60ff841115611565576115656113fe565b50506001821b610b81565b5060208310610133831016604e8410600b8410161715611593575081810a610b81565b61159d83836114d5565b80600019048211156115b1576115b16113fe565b029392505050565b6000610cc7838361151856fea2646970667358221220278ccea79b8a13f40ace10fe696bf4ca9aaf3cf6b338422dcb23473a1e32790764736f6c63430008130033636f6e737420746f6b656e203d20617267735b305d3b636f6e7374206c6f636174696f6e6964203d20617267735b315d3b636f6e737420737461727464617465203d20617267735b325d3b636f6e737420656e6464617465203d20617267735b335d3b636f6e73742064617461747970656964203d202754415647273b636f6e7374206170706964203d20617267735b345d3b636f6e737420636974794e616d65203d20617267735b355d3b636f6e73742075726c203d206068747470733a2f2f7777772e6e6365692e6e6f61612e676f762f63646f2d7765622f6170692f76322f646174613f6461746173657469643d4748434e44266c6f636174696f6e69643d247b6c6f636174696f6e69647d267374617274646174653d247b7374617274646174657d26656e64646174653d247b656e64646174657d26646174617479706569643d247b646174617479706569647d266c696d69743d3330603b636f6e7374206e6f6161526573706f6e7365203d2061776169742046756e6374696f6e732e6d616b654874747052657175657374287b75726c3a2075726c2c686561646572733a207b27746f6b656e273a20746f6b656e2c7d2c7d293b696620286e6f6161526573706f6e73652e6572726f7229207b7468726f77204572726f7228274e4f41412072657175657374206661696c656427293b7d636f6e7374207765617468657244617461203d206e6f6161526573706f6e73652e646174613b66756e6374696f6e2063616c63756c617465576561746865725269736b286461746129207b636f6e73742065787472656d6548696768203d2033353b636f6e73742065787472656d654c6f77203d20303b6c65742065787472656d65436f756e74203d20303b666f722028636f6e737420656e747279206f6620646174612e726573756c747329207b636f6e73742076616c7565203d20656e7472792e76616c75653b6966202876616c7565203e2065787472656d6548696768207c7c2076616c7565203c2065787472656d654c6f7729207b65787472656d65436f756e74202b3d20313b7d7d636f6e737420746f74616c4576656e7473203d20646174612e726573756c74732e6c656e6774683b636f6e7374207269736b466163746f72203d20746f74616c4576656e7473203e2030203f2065787472656d65436f756e74202f20746f74616c4576656e7473203a20303b72657475726e207269736b466163746f723b7d636f6e737420776561746865725269736b466163746f72203d2063616c63756c617465576561746865725269736b287765617468657244617461293b636f6e73742063697479526573706f6e7365203d2061776169742046756e6374696f6e732e6d616b654874747052657175657374287b75726c3a206068747470733a2f2f6170692e6f70656e776561746865726d61702e6f72672f67656f2f312e302f6469726563743f713d247b636974794e616d657d266c696d69743d312661707069643d247b61707069647d602c7d293b6966202863697479526573706f6e73652e6572726f7229207b7468726f77204572726f722827436974792072657175657374206661696c656427293b7d636f6e73742063697479203d2063697479526573706f6e73652e646174615b305d3b636f6e7374206c6174203d20636974792e6c61743b636f6e7374206c6f6e203d20636974792e6c6f6e3b636f6e737420736f696c55726c203d206068747470733a2f2f726573742e69737269632e6f72672f736f696c67726964732f76322e302f70726f706572746965732f71756572793f6c6f6e3d247b6c6f6e7d266c61743d247b6c61747d2670726f70657274793d636c61792670726f70657274793d73616e642670726f70657274793d73696c742664657074683d302d35636d2664657074683d302d3330636d2664657074683d352d3135636d2676616c75653d6d65616e603b636f6e737420736f696c526573706f6e7365203d2061776169742046756e6374696f6e732e6d616b654874747052657175657374287b75726c3a20736f696c55726c2c7d293b69662028736f696c526573706f6e73652e6572726f7229207b7468726f77204572726f722827536f696c2070726f706572746965732072657175657374206661696c656427293b7d636f6e737420736f696c44617461203d20736f696c526573706f6e73652e646174613b636f6e737420776569676874436c6179203d20302e333b636f6e73742077656967687453616e64203d20302e343b636f6e73742077656967687453696c74203d20302e333b66756e6374696f6e20657874726163744d65616e56616c756528726573706f6e73652c206c617965724e616d6529207b636f6e7374206c61796572203d20726573706f6e73652e70726f706572746965732e6c61796572732e66696e64286c203d3e206c2e6e616d65203d3d3d206c617965724e616d65293b696620286c6179657229207b636f6e737420646570746852616e6765203d206c617965722e6465707468732e66696e642864203d3e20642e6c6162656c203d3d3d2027302d35636d27293b72657475726e20646570746852616e676520262620646570746852616e67652e76616c7565732e6d65616e203f20646570746852616e67652e76616c7565732e6d65616e202f206c617965722e756e69745f6d6561737572652e645f666163746f72203a20303b7d72657475726e20303b7d636f6e737420636c61794d65616e203d20657874726163744d65616e56616c756528736f696c446174612c2027636c617927293b636f6e73742073616e644d65616e203d20657874726163744d65616e56616c756528736f696c446174612c202773616e6427293b636f6e73742073696c744d65616e203d20657874726163744d65616e56616c756528736f696c446174612c202773696c7427293b636f6e737420736f696c466163746f723d28776569676874436c61792a636c61794d65616e292b2877656967687453616e642a73616e644d65616e292b2877656967687453696c74202a73696c744d65616e293b636f6e7374207269736b466163746f72203d20313030202a2028776561746865725269736b466163746f72202b20736f696c466163746f72293b72657475726e2046756e6374696f6e732e656e636f646555696e74323536284d6174682e726f756e64287269736b466163746f7229293b",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80634b0795a8116100665780634b0795a8146100f157806379ba5097146100f95780638da5cb5b14610101578063b1e217491461011c578063f2fde38b1461012557600080fd5b806304c46c13146100985780630ca76175146100b45780633944ea3a146100c957806348a7d26d146100de575b600080fd5b6100a160095481565b6040519081526020015b60405180910390f35b6100c76100c2366004610fad565b610138565b005b6100d16101bc565b6040516100ab919061105f565b6100a16100ec366004611072565b61024a565b6100d161037a565b6100c7610387565b6000546040516001600160a01b0390911681526020016100ab565b6100a160025481565b6100c7610133366004611100565b610436565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101815760405163c6829f8360e01b815260040160405180910390fd5b61018c83838361044a565b60405183907f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e690600090a2505050565b600380546101c990611129565b80601f01602080910402602001604051908101604052809291908181526020018280546101f590611129565b80156102425780601f1061021757610100808354040283529160200191610242565b820191906000526020600020905b81548152906001019060200180831161022557829003601f168201915b505050505081565b60006102546104e5565b6102956040805160e0810190915280600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b610332600680546102a590611129565b80601f01602080910402602001604051908101604052809291908181526020018280546102d190611129565b801561031e5780601f106102f35761010080835404028352916020019161031e565b820191906000526020600020905b81548152906001019060200180831161030157829003601f168201915b50505050508261053a90919063ffffffff16565b821561034c5761034c6103458486611163565b829061054b565b61036c61035882610575565b600754600854889163ffffffff169061084d565b600281905595945050505050565b600480546101c990611129565b6001546001600160a01b031633146103df5760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b60448201526064015b60405180910390fd5b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b61043e6104e5565b6104478161091f565b50565b826002541461046f5760405163d068bf5b60e01b8152600481018490526024016103d6565b600361047b8382611248565b50818060200190518101906104909190611307565b600955600461049f8282611248565b50827ffc03b1503acd478faf9c08107596f6d5c04b4591fea84f8d6f21bdf613b5370e600954600360046040516104d89392919061139d565b60405180910390a2505050565b6000546001600160a01b031633146105385760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b60448201526064016103d6565b565b61054782600080846109c8565b5050565b805160000361056d5760405163fe936cb760e01b815260040160405180910390fd5b60a090910152565b60606000610584610100610a46565b90506105bd6040518060400160405280600c81526020016b31b7b232a637b1b0ba34b7b760a11b81525082610a6790919063ffffffff16565b82516105db9060028111156105d4576105d46113d2565b8290610a85565b6040805180820190915260088152676c616e677561676560c01b6020820152610605908290610a67565b604083015161061c9080156105d4576105d46113d2565b604080518082019091526006815265736f7572636560d01b6020820152610644908290610a67565b6060830151610654908290610a67565b60a083015151156106e8576040805180820190915260048152636172677360e01b6020820152610685908290610a67565b61068e81610abe565b60005b8360a00151518110156106de576106ce8460a0015182815181106106b7576106b76113e8565b602002602001015183610a6790919063ffffffff16565b6106d781611414565b9050610691565b506106e881610ae2565b608083015151156107ac5760008360200151600281111561070b5761070b6113d2565b036107295760405163a80d31f760e01b815260040160405180910390fd5b60408051808201909152600f81526e39b2b1b932ba39a637b1b0ba34b7b760891b602082015261075a908290610a67565b610773836020015160028111156105d4576105d46113d2565b6040805180820190915260078152667365637265747360c81b602082015261079c908290610a67565b60808301516107ac908290610b00565b60c083015151156108455760408051808201909152600981526862797465734172677360b81b60208201526107e2908290610a67565b6107eb81610abe565b60005b8360c001515181101561083b5761082b8460c001518281518110610814576108146113e8565b602002602001015183610b0090919063ffffffff16565b61083481611414565b90506107ee565b5061084581610ae2565b515192915050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663461d27628688600188886040518663ffffffff1660e01b81526004016108a595949392919061142d565b6020604051808303816000875af11580156108c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e89190611307565b60405190915081907f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db890600090a295945050505050565b336001600160a01b038216036109775760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016103d6565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b80516000036109ea576040516322ce3edd60e01b815260040160405180910390fd5b838360028111156109fd576109fd6113d2565b90816002811115610a1057610a106113d2565b90525060408401828015610a2657610a266113d2565b90818015610a3657610a366113d2565b9052506060909301929092525050565b610a4e610ebb565b8051610a5a9083610b0d565b5060006020820152919050565b610a748260038351610b87565b8151610a809082610ca6565b505050565b8151610a929060c2610cce565b506105478282604051602001610aaa91815260200190565b604051602081830303815290604052610b00565b610ac9816004610d37565b600181602001818151610adc9190611476565b90525050565b610aed816007610d37565b600181602001818151610adc9190611489565b610a748260028351610b87565b604080518082019091526060815260006020820152610b2d60208361149c565b15610b5557610b3d60208361149c565b610b48906020611489565b610b529083611476565b91505b602080840183905260405180855260008152908184010181811015610b7957600080fd5b604052508290505b92915050565b6017816001600160401b031611610bb3578251610bad9060e0600585901b168317610cce565b50505050565b60ff816001600160401b031611610bf3578251610bdb906018611fe0600586901b1617610cce565b508251610bad906001600160401b0383166001610d4e565b61ffff816001600160401b031611610c34578251610c1c906019611fe0600586901b1617610cce565b508251610bad906001600160401b0383166002610d4e565b63ffffffff816001600160401b031611610c77578251610c5f90601a611fe0600586901b1617610cce565b508251610bad906001600160401b0383166004610d4e565b8251610c8e90601b611fe0600586901b1617610cce565b508251610bad906001600160401b0383166008610d4e565b604080518082019091526060815260006020820152610cc783838451610dd3565b9392505050565b6040805180820190915260608152600060208201528251516000610cf3826001611476565b905084602001518210610d1457610d1485610d0f8360026114be565b610ea4565b8451602083820101858153508051821115610d2d578181525b5093949350505050565b8151610a8090601f611fe0600585901b1617610cce565b6040805180820190915260608152600060208201528351516000610d728285611476565b90508560200151811115610d8f57610d8f86610d0f8360026114be565b60006001610d9f866101006115b9565b610da99190611489565b90508651828101878319825116178152508051831115610dc7578281525b50959695505050505050565b6040805180820190915260608152600060208201528251821115610df657600080fd5b8351516000610e058483611476565b90508560200151811115610e2257610e2286610d0f8360026114be565b855180518382016020019160009180851115610e3c578482525b505050602086015b60208610610e7c5780518252610e5b602083611476565b9150610e68602082611476565b9050610e75602087611489565b9550610e44565b51815160001960208890036101000a0190811690199190911617905250849150509392505050565b8151610eb08383610b0d565b50610bad8382610ca6565b6040518060400160405280610ee3604051806040016040528060608152602001600081525090565b8152602001600081525090565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715610f2e57610f2e610ef0565b604052919050565b60006001600160401b03831115610f4f57610f4f610ef0565b610f62601f8401601f1916602001610f06565b9050828152838383011115610f7657600080fd5b828260208301376000602084830101529392505050565b600082601f830112610f9e57600080fd5b610cc783833560208501610f36565b600080600060608486031215610fc257600080fd5b8335925060208401356001600160401b0380821115610fe057600080fd5b610fec87838801610f8d565b9350604086013591508082111561100257600080fd5b5061100f86828701610f8d565b9150509250925092565b6000815180845260005b8181101561103f57602081850181015186830182015201611023565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610cc76020830184611019565b60008060006040848603121561108757600080fd5b83356001600160401b03808216821461109f57600080fd5b909350602085013590808211156110b557600080fd5b818601915086601f8301126110c957600080fd5b8135818111156110d857600080fd5b8760208260051b85010111156110ed57600080fd5b6020830194508093505050509250925092565b60006020828403121561111257600080fd5b81356001600160a01b0381168114610cc757600080fd5b600181811c9082168061113d57607f821691505b60208210810361115d57634e487b7160e01b600052602260045260246000fd5b50919050565b60006001600160401b038084111561117d5761117d610ef0565b8360051b602061118e818301610f06565b8681529185019181810190368411156111a657600080fd5b865b848110156111ee578035868111156111c05760008081fd5b880136601f8201126111d25760008081fd5b6111e0368235878401610f36565b8452509183019183016111a8565b50979650505050505050565b601f821115610a8057600081815260208120601f850160051c810160208610156112215750805b601f850160051c820191505b818110156112405782815560010161122d565b505050505050565b81516001600160401b0381111561126157611261610ef0565b6112758161126f8454611129565b846111fa565b602080601f8311600181146112aa57600084156112925750858301515b600019600386901b1c1916600185901b178555611240565b600085815260208120601f198616915b828110156112d9578886015182559484019460019091019084016112ba565b50858210156112f75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020828403121561131957600080fd5b5051919050565b6000815461132d81611129565b80855260206001838116801561134a576001811461136457611392565b60ff1985168884015283151560051b880183019550611392565b866000528260002060005b8581101561138a5781548a820186015290830190840161136f565b890184019650505b505050505092915050565b8381526060602082015260006113b66060830185611320565b82810360408401526113c88185611320565b9695505050505050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611426576114266113fe565b5060010190565b6001600160401b038616815260a06020820152600061144f60a0830187611019565b61ffff9590951660408301525063ffffffff92909216606083015260809091015292915050565b80820180821115610b8157610b816113fe565b81810381811115610b8157610b816113fe565b6000826114b957634e487b7160e01b600052601260045260246000fd5b500690565b8082028115828204841417610b8157610b816113fe565b600181815b808511156115105781600019048211156114f6576114f66113fe565b8085161561150357918102915b93841c93908002906114da565b509250929050565b60008261152757506001610b81565b8161153457506000610b81565b816001811461154a576002811461155457611570565b6001915050610b81565b60ff841115611565576115656113fe565b50506001821b610b81565b5060208310610133831016604e8410600b8410161715611593575081810a610b81565b61159d83836114d5565b80600019048211156115b1576115b16113fe565b029392505050565b6000610cc7838361151856fea2646970667358221220278ccea79b8a13f40ace10fe696bf4ca9aaf3cf6b338422dcb23473a1e32790764736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "details": "Either response or error parameter will be set, but never both.",
        "params": {
          "err": "Aggregated error either from the request's source code or from the execution pipeline.",
          "requestId": "The requestId returned by FunctionsClient.sendRequest().",
          "response": "Aggregated response from the request's source code."
        }
      },
      "sendRequest(uint64,string[])": {
        "params": {
          "args": "The arguments to pass to the HTTP request",
          "subscriptionId": "The ID for the Chainlink subscription"
        },
        "returns": {
          "requestId": "The ID of the request"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "constructor": {
        "notice": "Initializes the contract with the Chainlink router address and sets the contract owner"
      },
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "notice": "Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round."
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "sendRequest(uint64,string[])": {
        "notice": "Sends an HTTP request for weather and soil data"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address."
      }
    },
    "notice": "deployed address  Sepolio : 0x8e6030023C1454fFbc2EF18c0da14809Fe95F7E0",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 816,
        "contract": "contracts/chain_link/WeatherRiskFunctionsConsumer.sol:WeatherRiskFunctionsConsumer",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 818,
        "contract": "contracts/chain_link/WeatherRiskFunctionsConsumer.sol:WeatherRiskFunctionsConsumer",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2285,
        "contract": "contracts/chain_link/WeatherRiskFunctionsConsumer.sol:WeatherRiskFunctionsConsumer",
        "label": "s_lastRequestId",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 2287,
        "contract": "contracts/chain_link/WeatherRiskFunctionsConsumer.sol:WeatherRiskFunctionsConsumer",
        "label": "s_lastResponse",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes_storage"
      },
      {
        "astId": 2289,
        "contract": "contracts/chain_link/WeatherRiskFunctionsConsumer.sol:WeatherRiskFunctionsConsumer",
        "label": "s_lastError",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes_storage"
      },
      {
        "astId": 2306,
        "contract": "contracts/chain_link/WeatherRiskFunctionsConsumer.sol:WeatherRiskFunctionsConsumer",
        "label": "router",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2309,
        "contract": "contracts/chain_link/WeatherRiskFunctionsConsumer.sol:WeatherRiskFunctionsConsumer",
        "label": "source",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 2312,
        "contract": "contracts/chain_link/WeatherRiskFunctionsConsumer.sol:WeatherRiskFunctionsConsumer",
        "label": "gasLimit",
        "offset": 0,
        "slot": "7",
        "type": "t_uint32"
      },
      {
        "astId": 2315,
        "contract": "contracts/chain_link/WeatherRiskFunctionsConsumer.sol:WeatherRiskFunctionsConsumer",
        "label": "donID",
        "offset": 0,
        "slot": "8",
        "type": "t_bytes32"
      },
      {
        "astId": 2317,
        "contract": "contracts/chain_link/WeatherRiskFunctionsConsumer.sol:WeatherRiskFunctionsConsumer",
        "label": "riskFactor",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}