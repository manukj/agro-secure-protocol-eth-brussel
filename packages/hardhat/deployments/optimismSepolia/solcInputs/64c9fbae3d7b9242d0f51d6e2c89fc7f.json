{
  "language": "Solidity",
  "sources": {
    "contracts/insurance_manager/InsuranceManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ncontract InsuranceManager {\n\n    struct Insured {\n        address insuredAddress;\n        uint256 insuranceAmount;\n        uint256 premiumPaid;\n        uint256 validityPeriod;\n        uint256 startTime;\n        bool isValid;\n        bool isClaimed;\n    }\n\n    mapping(address => Insured) public insurances;\n    address public owner;\n\n    event NewInsurance(address indexed insuredAddress, uint256 insuranceAmount, uint256 premiumPaid, uint256 validityPeriod);\n    event InsuranceUpdated(address indexed insuredAddress, uint256 insuranceAmount, uint256 premiumPaid, uint256 validityPeriod);\n    event InsuranceClaimed(address indexed insuredAddress, uint256 insuranceAmount);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not the contract owner\");\n        _;\n    }\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    function addNewInsurance(address _insuredAddress, uint256 _insuranceAmount, uint256 _validityPeriod) public payable {\n        require(insurances[_insuredAddress].insuredAddress == address(0), \"Insurance already exists for this address\");\n\n        insurances[_insuredAddress] = Insured({\n            insuredAddress: _insuredAddress,\n            insuranceAmount: _insuranceAmount,\n            premiumPaid: msg.value,\n            validityPeriod: _validityPeriod,\n            startTime: block.timestamp,\n            isValid: true,\n            isClaimed: false\n        });\n\n        emit NewInsurance(_insuredAddress, _insuranceAmount, msg.value, _validityPeriod);\n    }\n\n    function getInsurance(address _insuredAddress) public view returns (Insured memory) {\n        require(insurances[_insuredAddress].insuredAddress != address(0), \"Insurance not found\");\n        return insurances[_insuredAddress];\n    }\n\n    function updateInsurance(address _insuredAddress, uint256 _insuranceAmount, uint256 _validityPeriod) public {\n        require(insurances[_insuredAddress].insuredAddress != address(0), \"Insurance not found\");\n\n        insurances[_insuredAddress].insuranceAmount = _insuranceAmount;\n        insurances[_insuredAddress].validityPeriod = _validityPeriod;\n\n        emit InsuranceUpdated(_insuredAddress, _insuranceAmount, insurances[_insuredAddress].premiumPaid, _validityPeriod);\n    }\n\n    function checkValidity(address _insuredAddress) public view returns (bool) {\n        require(insurances[_insuredAddress].insuredAddress != address(0), \"Insurance not found\");\n        Insured memory insurance = insurances[_insuredAddress];\n        return insurance.isValid && (block.timestamp <= insurance.startTime + insurance.validityPeriod);\n    }\n\n    function invalidateInsurance(address _insuredAddress) public {\n        require(insurances[_insuredAddress].insuredAddress != address(0), \"Insurance not found\");\n\n        insurances[_insuredAddress].isValid = false;\n    }\n\n    function renewInsurance(address _insuredAddress, uint256 _additionalValidityPeriod) public {\n        require(insurances[_insuredAddress].insuredAddress != address(0), \"Insurance not found\");\n        require(insurances[_insuredAddress].isValid, \"Insurance is not valid\");\n\n        insurances[_insuredAddress].validityPeriod += _additionalValidityPeriod;\n    }\n\n    function claimInsurance(address _insuredAddress) public {\n        require(insurances[_insuredAddress].insuredAddress != address(0), \"Insurance not found\");\n        require(insurances[_insuredAddress].isValid, \"Insurance is not valid\");\n        require(!insurances[_insuredAddress].isClaimed, \"Insurance already claimed\");\n        require(block.timestamp <= insurances[_insuredAddress].startTime + insurances[_insuredAddress].validityPeriod, \"Insurance validity period has expired\");\n\n        insurances[_insuredAddress].isClaimed = true;\n        insurances[_insuredAddress].isValid = false;\n\n        // Logic to transfer the insurance amount to the claimant can be added here.\n        // For example: payable(_insuredAddress).transfer(insurances[_insuredAddress].insuranceAmount);\n\n        emit InsuranceClaimed(_insuredAddress, insurances[_insuredAddress].insuranceAmount);\n    }\n\n    function withdraw() public onlyOwner {\n        payable(owner).transfer(address(this).balance);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}